export default {
  c: {},
  p: {
    notStart: 'Do not start',
    introduction: 'Introduction',
    rootHasTrueRootPermission: 'The root inside has true root permissions.',
    rootIsJustAnOrdinaryUser: 'The root inside is just an ordinary user permission outside. Default is false.',
    containerCanSeeManyDevices:
      'The started container can see many devices on the host and can perform mount operations. You can start a Docker container within a Docker container.',
    privilege: 'Privilege:',
    yes: 'Yes',
    no: 'No',
    cancel: 'Cancel',
    confirm: 'Confirm',
    containerNameIsRequired: 'Container name is required',
    containerNameAlphanumeric: 'Container name must be alphanumeric and longer than 1 character',
    port: 'Port',
    container: 'Container',
    rebuildContainer: 'Rebuild Container',
    operationPrompt: 'Operation Prompt',
    containerRebuildDesc:
      'Container rebuild refers to creating an identical container using the parameters of the already created container.',
    containerRestartDeleteBefore: 'Before restarting, the previous container will be automatically deleted.',
    containerDataBackupWarning:
      'If the container data directory is not mounted, please backup the data before using this feature.',
    newContainerParamNotGuaranteed:
      'This feature cannot guarantee that the added container will have exactly the same parameters as the previous container. Please use it carefully.',
    baseImage: 'Base Image',
    containerName: 'Container Name:',
    hostIp: 'Host IP',
    containerPort: 'Container Port',
    portProtocol: 'Port Protocol',
    mountedVolume: 'Mounted Volume',
    host: 'Host',
    hostDirectory: 'Host Directory',
    containerDirectory: 'Container Directory',
    environmentVariables: 'Environment Variables',
    variableName: 'Variable Name',
    variableValue: 'Variable Value',
    command: 'Command',
    commandValue: 'Command Value',
    fillRunningCommand: 'Fill in the running command',
    hostname: 'Hostname',
    network: 'Network',
    networkMode: 'Network Mode: bridge, container:<name|id>, host, container, none',
    createNetworkStack: 'Create a new network stack for containers on docker bridge',
    containerNoNetwork: 'This container has no network',
    reuseAnotherContainerNetworkStack: "Reuse another container's network stack",
    useHostNetworkStack:
      "Use the host's network stack within the container. Note: Host mode grants containers full access to local system services (such as D-bus), so it is considered insecure.",
    restartPolicy: 'Restart Policy',
    restartPolicyOptions: 'Restart Policy: no, always, unless-stopped, on-failure',
    noAutoRestart: 'Do not restart automatically',
    alwaysRestart: 'Always restart the container regardless of the exit code it returns.',
    restartOnFailure:
      'Restart the container if it exits with a non-zero exit code. You can specify the number of times: on-failure:2',
    restartUnlessStopped: 'Restart the container unless it has been stopped',
    storageOptions: 'Storage Options',
    configName: 'Configuration Name (e.g., size)',
    configValue: 'Configuration Value (e.g., 5g)',
    containerRuntime: 'Container Runtime',
    containerLabels: 'Container Labels',
    containerLabelExample: 'Container labels, such as: key1=values1&keyvalue2',
    autoStart: 'Auto Start',
    start: 'Start',
    port_1: 'Port',
    container_1: 'Container',
    rebuildContainer_1: 'Rebuild Container',
    operationPrompt_1: 'Operation Prompt',
    containerRebuildDesc_1:
      'Container rebuild refers to creating an identical container using the already created container parameters.',
    containerRestartDeleteBefore_1: 'Before restarting, the previous container will be automatically deleted.',
    containerDataBackupWarning_1:
      'If the container data directory is not mounted, please backup the data before using this feature.',
    newContainerParamNotGuaranteed_1:
      'This feature cannot guarantee that the new container and the previous container parameters are exactly the same. Please use it carefully.',
    baseImage_1: 'Base Image',
    containerName_1: 'Container Name:',
    hostIp_1: 'Host IP',
    containerPort_1: 'Container Port',
    portProtocol_1: 'Port Protocol',
    mountedVolume_1: 'Mounted Volume',
    host_1: 'Host',
    hostDirectory_1: 'Host Directory',
    containerDirectory_1: 'Container Directory',
    environmentVariables_1: 'Environment Variables',
    variableName_1: 'Variable Name',
    variableValue_1: 'Variable Value',
    command_1: 'Command',
    commandValue_1: 'Command Value',
    fillRunningCommand_1: 'Fill in the running command',
    hostname_1: 'Hostname',
    network_1: 'Network',
    networkMode_1: 'Network Mode: bridge, container:<name|id>, host, container, none',
    createNetworkStack_1: 'Create a new network stack for containers on docker bridge',
    containerNoNetwork_1: 'This container has no network',
    reuseAnotherContainerNetworkStack_1: "Reuse another container's network stack",
    useHostNetworkStack_1:
      'Use the host network stack inside the container. Note: Host mode grants containers full access to local system services (such as D-bus), so it is considered insecure.',
    restartPolicy_1: 'Restart Policy',
    restartPolicyOptions_1: 'Restart Policy: no, always, unless-stopped, on-failure',
    noAutoRestart_1: 'Do not automatically restart',
    alwaysRestart_1: 'Always restart the container regardless of the exit code.',
    restartOnFailure_1:
      'Restart the container if it exits with a non-zero exit code. You can specify the number of times: on-failure:2',
    restartUnlessStopped_1: 'Restart the container unless it has been stopped',
    storageOptions_1: 'Storage Options',
    configName_1: 'Configuration Name (e.g., size)',
    configValue_1: 'Configuration Value (e.g., 5g)',
    containerRuntime_1: 'Container Runtime',
    containerLabels_1: 'Container Labels',
    containerLabelExample_1: 'Container labels, e.g., key1=values1&keyvalue2',
    autoStart_1: 'Auto Start',
    start_1: 'Start'
  }
}
