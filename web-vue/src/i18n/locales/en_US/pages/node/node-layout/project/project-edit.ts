export default {
  c: {
    createOnce: 'Cannot be modified after creation',
    projectName: 'Project name',
    runProject: 'Run project',
    selectAuthPath: 'Please select the project authorization path',
    viewNodeScript: 'View node script',
    configuration: 'Configuration',
    configExample: 'Configuration example',
    defaultLogPath: 'The default is the plugin-side data directory/${projectId}/${projectId}.log'
  },
  p: {
    loadingData: 'Loading project data...',
    projectId: 'Project ID',
    randomGenerate: 'Randomly generate',
    groupName: 'Group name:',
    addNewGroup: 'Add new group',
    selectGroup: 'Select group',
    runMode: 'Run mode',
    customizeProject: 'Realize custom project management with script templates',
    staticFolder: 'The project is a static folder',
    noStatusControl: 'No project status or control functions',
    selectRunMode: 'Please select the run mode',
    notRecommended: 'Not recommended',
    softLinkProject: 'Soft-linked project',
    selectSoftLinkProject: 'Please select a soft-linked project',
    projectPath: 'Project path',
    authPathDesc: 'The authorization path refers to the folder where the project files are stored in the service',
    modifyAuthConfig: 'Can be modified in Node Management => Plugin-side Configuration => Authorization Configuration',
    folderName: 'The project folder is the actual directory name where the project is stored',
    storagePath: 'The project files will be stored in',
    fullPath: 'Project authorization path + project folder',
    preConfigAuthDir: 'It is necessary to configure the authorization directory for the machine in advance',
    quickConfig: 'Quick configuration',
    storageFolder: 'Folder for project storage',
    completePath: 'Complete project directory',
    content: 'Content',
    configFormat:
      'Configure in yaml/yml format, scriptId is the relative path of the script file under the project path or the script template ID, which can be viewed in the script template editing popup',
    supportedVars: 'The variables supported in the script are: ${PROJECT_ID}, ${PROJECT_NAME}, ${PROJECT_PATH}',
    outputFormat: 'After the process executes the script, the last line of the output content must be: running',
    processId: 'Actual process ID for the current project',
    statusCheck:
      '. If the last line of the output is not in the expected format, the project status will be not running',
    configReference: 'Please refer to the configuration example for configuration details',
    useNodeScript: 'You can use node script:',
    fillDSL:
      'Please fill in the project DSL configuration content. You can click the tab above to view the configuration example',
    logDir: 'Log directory',
    logDirDesc: 'The log directory refers to the directory where the console logs are stored',
    selectableList:
      'The selectable list is consistent with the project authorization directory, i.e., the same configuration',
    mainClass: 'The main class for running the program (optional for jar mode execution)',
    fillInXxx: 'Fill in [xxx',
    jvmOptions: '-Dext.dirs=xxx: -cp xx :xx]',
    jvmParameters: 'JVM parameters',
    parameters: 'Parameters',
    optional: 'Optional',
    jvmSettings: 'jvm, e.g., -Xms512m -Xmx512m',
    argsParameters: 'args parameters',
    functionArgs: 'Function args parameters, optional',
    argsExample: 'e.g., --server',
    dslEnvVariables: 'DSL environment variables',
    environmentVariables: 'Environment variables',
    envExample: 'e.g., key1',
    autoStart: 'Auto-start',
    checkProjectStatusOnStartup:
      'Check the project status when the plugin starts. If the project status is not running, try to execute and start the project',
    notAutoStartOnBoot:
      'Not auto-started on server boot. If you need auto-start on boot, it is recommended to configure',
    pluginAutoStartOnBoot: 'Plugin auto-start on boot',
    enableAutoStartSwitch: 'and enable this switch',
    switchOn: 'On',
    switchOff: 'Off',
    checkAndStartOnPluginStartup:
      'Automatically check the project when the plugin starts. If the project is not running, it will try to start it',
    disableScanning: 'Disable scanning',
    disableScanningForLargeProjects:
      'If the project directory is large or involves deep directories, it is recommended to turn off scanning to avoid long scanning times affecting performance',
    noScanning: 'No scanning',
    enableScanning: 'Scanning',
    notifyUrl:
      'Requests will be sent to the corresponding URL when the project starts, stops, restarts, or when there are file changes',
    notifyUrlParams: 'The parameters passed include: projectId, projectName, type, result',
    notifyUrlValues: 'The possible values are: stop, beforeStop, start, beforeRestart, fileChange',
    projectSpecificTypes: 'Type-specific project types: reload, restart',
    optionalNotifyUrl:
      'Requests will be sent to the corresponding URL when the project starts, stops, restarts, or when there are file changes (optional, GET request)',
    runCommand: 'Run command',
    none: 'None',
    authorizedDirectory: 'Configure authorized directory',
    projectIdInput: 'Please enter the project ID',
    projectNameInput: 'Please enter the project name',
    projectRunModeSelection: 'Please select the project run mode',
    projectFolderInput: 'Please enter the project folder',
    distributionManagement: 'For independent project distribution, please modify in distribution management'
  }
}
